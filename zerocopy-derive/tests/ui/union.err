{"message":"unsupported on types with type parameters","code":null,"level":"error","spans":[{"file_name":"tests/ui/union.rs","byte_start":279,"byte_end":286,"line_start":16,"line_end":16,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"#[derive(AsBytes)]","highlight_start":10,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/union.rs","byte_start":279,"byte_end":286,"line_start":16,"line_end":16,"column_start":10,"column_end":17,"is_primary":false,"text":[{"text":"#[derive(AsBytes)]","highlight_start":10,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsBytes)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1572,"byte_end":1650,"line_start":50,"line_end":50,"column_start":1,"column_end":79,"is_primary":false,"text":[{"text":"pub fn derive_as_bytes(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"error: unsupported on types with type parameters\n  --> tests/ui/union.rs:16:10\n   |\n16 | #[derive(AsBytes)]\n   |          ^^^^^^^\n   |\n   = note: this error originates in the derive macro `AsBytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"cannot derive Unaligned with repr(align(N > 1))","code":null,"level":"error","spans":[{"file_name":"tests/ui/union.rs","byte_start":487,"byte_end":495,"line_start":34,"line_end":34,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"#[repr(C, align(2))]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: cannot derive Unaligned with repr(align(N > 1))\n  --> tests/ui/union.rs:34:11\n   |\n34 | #[repr(C, align(2))]\n   |           ^^^^^^^^\n\n"}
{"message":"cannot derive Unaligned with repr(align(N > 1))","code":null,"level":"error","spans":[{"file_name":"tests/ui/union.rs","byte_start":812,"byte_end":820,"line_start":50,"line_end":50,"column_start":16,"column_end":24,"is_primary":true,"text":[{"text":"#[repr(packed, align(2))]","highlight_start":16,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: cannot derive Unaligned with repr(align(N > 1))\n  --> tests/ui/union.rs:50:16\n   |\n50 | #[repr(packed, align(2))]\n   |                ^^^^^^^^\n\n"}
{"message":"cannot derive Unaligned with repr(align(N > 1))","code":null,"level":"error","spans":[{"file_name":"tests/ui/union.rs","byte_start":896,"byte_end":904,"line_start":56,"line_end":56,"column_start":18,"column_end":26,"is_primary":true,"text":[{"text":"#[repr(align(1), align(2))]","highlight_start":18,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: cannot derive Unaligned with repr(align(N > 1))\n  --> tests/ui/union.rs:56:18\n   |\n56 | #[repr(align(1), align(2))]\n   |                  ^^^^^^^^\n\n"}
{"message":"cannot derive Unaligned with repr(align(N > 1))","code":null,"level":"error","spans":[{"file_name":"tests/ui/union.rs","byte_start":971,"byte_end":979,"line_start":62,"line_end":62,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"#[repr(align(2), align(4))]","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: cannot derive Unaligned with repr(align(N > 1))\n  --> tests/ui/union.rs:62:8\n   |\n62 | #[repr(align(2), align(4))]\n   |        ^^^^^^^^\n\n"}
{"message":"the trait bound `AsBytes: FieldsAreSameSize<true>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"tests/ui/union.rs","byte_start":358,"byte_end":365,"line_start":22,"line_end":22,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"#[derive(AsBytes)]","highlight_start":10,"highlight_end":17}],"label":"the trait `FieldsAreSameSize<true>` is not implemented for `AsBytes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/union.rs","byte_start":358,"byte_end":365,"line_start":22,"line_end":22,"column_start":10,"column_end":17,"is_primary":false,"text":[{"text":"#[derive(AsBytes)]","highlight_start":10,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsBytes)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1572,"byte_end":1650,"line_start":50,"line_end":50,"column_start":1,"column_end":79,"is_primary":false,"text":[{"text":"pub fn derive_as_bytes(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `FieldsAreSameSize<false>` is implemented for `AsBytes`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `assert_fields_are_same_size`","code":null,"level":"note","spans":[{"file_name":"tests/ui/union.rs","byte_start":358,"byte_end":365,"line_start":22,"line_end":22,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"#[derive(AsBytes)]","highlight_start":10,"highlight_end":17}],"label":"required by this bound in `assert_fields_are_same_size`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/union.rs","byte_start":358,"byte_end":365,"line_start":22,"line_end":22,"column_start":10,"column_end":17,"is_primary":false,"text":[{"text":"#[derive(AsBytes)]","highlight_start":10,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsBytes)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1572,"byte_end":1650,"line_start":50,"line_end":50,"column_start":1,"column_end":79,"is_primary":false,"text":[{"text":"pub fn derive_as_bytes(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error[E0277]: the trait bound `AsBytes: FieldsAreSameSize<true>` is not satisfied\n  --> tests/ui/union.rs:22:10\n   |\n22 | #[derive(AsBytes)]\n   |          ^^^^^^^ the trait `FieldsAreSameSize<true>` is not implemented for `AsBytes`\n   |\n   = help: the trait `FieldsAreSameSize<false>` is implemented for `AsBytes`\nnote: required by a bound in `assert_fields_are_same_size`\n  --> tests/ui/union.rs:22:10\n   |\n22 | #[derive(AsBytes)]\n   |          ^^^^^^^ required by this bound in `assert_fields_are_same_size`\n   = note: this error originates in the derive macro `AsBytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"type has conflicting packed and align representation hints","code":{"code":"E0587","explanation":"A type has both `packed` and `align` representation hints.\n\nErroneous code example:\n\n```compile_fail,E0587\n#[repr(packed, align(8))] // error!\nstruct Umbrella(i32);\n```\n\nYou cannot use `packed` and `align` hints on a same type. If you want to pack a\ntype to a given size, you should provide a size to packed:\n\n```\n#[repr(packed)] // ok!\nstruct Umbrella(i32);\n```\n"},"level":"error","spans":[{"file_name":"tests/ui/union.rs","byte_start":823,"byte_end":839,"line_start":51,"line_end":51,"column_start":1,"column_end":17,"is_primary":true,"text":[{"text":"union Unaligned3 {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error[E0587]: type has conflicting packed and align representation hints\n  --> tests/ui/union.rs:51:1\n   |\n51 | union Unaligned3 {\n   | ^^^^^^^^^^^^^^^^\n\n"}
{"message":"aborting due to 7 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 7 previous errors\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0587.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"Some errors have detailed explanations: E0277, E0587.\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"For more information about an error, try `rustc --explain E0277`.\n"}
