{"message":"the trait bound `AsBytes1: HasPadding<false>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"tests/ui/late_compile_pass.rs","byte_start":592,"byte_end":599,"line_start":27,"line_end":27,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"#[derive(AsBytes)]","highlight_start":10,"highlight_end":17}],"label":"the trait `HasPadding<false>` is not implemented for `AsBytes1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/late_compile_pass.rs","byte_start":592,"byte_end":599,"line_start":27,"line_end":27,"column_start":10,"column_end":17,"is_primary":false,"text":[{"text":"#[derive(AsBytes)]","highlight_start":10,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsBytes)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1572,"byte_end":1650,"line_start":50,"line_end":50,"column_start":1,"column_end":79,"is_primary":false,"text":[{"text":"pub fn derive_as_bytes(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `HasPadding<true>` is implemented for `AsBytes1`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `assert_no_padding`","code":null,"level":"note","spans":[{"file_name":"tests/ui/late_compile_pass.rs","byte_start":592,"byte_end":599,"line_start":27,"line_end":27,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"#[derive(AsBytes)]","highlight_start":10,"highlight_end":17}],"label":"required by this bound in `assert_no_padding`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/late_compile_pass.rs","byte_start":592,"byte_end":599,"line_start":27,"line_end":27,"column_start":10,"column_end":17,"is_primary":false,"text":[{"text":"#[derive(AsBytes)]","highlight_start":10,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsBytes)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1572,"byte_end":1650,"line_start":50,"line_end":50,"column_start":1,"column_end":79,"is_primary":false,"text":[{"text":"pub fn derive_as_bytes(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error[E0277]: the trait bound `AsBytes1: HasPadding<false>` is not satisfied\n  --> tests/ui/late_compile_pass.rs:27:10\n   |\n27 | #[derive(AsBytes)]\n   |          ^^^^^^^ the trait `HasPadding<false>` is not implemented for `AsBytes1`\n   |\n   = help: the trait `HasPadding<true>` is implemented for `AsBytes1`\nnote: required by a bound in `assert_no_padding`\n  --> tests/ui/late_compile_pass.rs:27:10\n   |\n27 | #[derive(AsBytes)]\n   |          ^^^^^^^ required by this bound in `assert_no_padding`\n   = note: this error originates in the derive macro `AsBytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"the trait bound `&'static str: FromBytes` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"tests/ui/late_compile_pass.rs","byte_start":489,"byte_end":498,"line_start":18,"line_end":18,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(FromBytes)]","highlight_start":10,"highlight_end":19}],"label":"the trait `FromBytes` is not implemented for `&'static str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/late_compile_pass.rs","byte_start":489,"byte_end":498,"line_start":18,"line_end":18,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(FromBytes)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(FromBytes)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1162,"byte_end":1242,"line_start":39,"line_end":39,"column_start":1,"column_end":81,"is_primary":false,"text":[{"text":"pub fn derive_from_bytes(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `FromBytes`:\n  ()\n  F32<O>\n  F64<O>\n  FromBytes1\n  I128<O>\n  I16<O>\n  I32<O>\n  I64<O>\nand 36 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ImplementsFromBytes`","code":null,"level":"note","spans":[{"file_name":"tests/ui/late_compile_pass.rs","byte_start":489,"byte_end":498,"line_start":18,"line_end":18,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(FromBytes)]","highlight_start":10,"highlight_end":19}],"label":"required by this bound in `ImplementsFromBytes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/late_compile_pass.rs","byte_start":489,"byte_end":498,"line_start":18,"line_end":18,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(FromBytes)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(FromBytes)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1162,"byte_end":1242,"line_start":39,"line_end":39,"column_start":1,"column_end":81,"is_primary":false,"text":[{"text":"pub fn derive_from_bytes(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error[E0277]: the trait bound `&'static str: FromBytes` is not satisfied\n  --> tests/ui/late_compile_pass.rs:18:10\n   |\n18 | #[derive(FromBytes)]\n   |          ^^^^^^^^^ the trait `FromBytes` is not implemented for `&'static str`\n   |\n   = help: the following other types implement trait `FromBytes`:\n             ()\n             F32<O>\n             F64<O>\n             FromBytes1\n             I128<O>\n             I16<O>\n             I32<O>\n             I64<O>\n           and 36 others\nnote: required by a bound in `ImplementsFromBytes`\n  --> tests/ui/late_compile_pass.rs:18:10\n   |\n18 | #[derive(FromBytes)]\n   |          ^^^^^^^^^ required by this bound in `ImplementsFromBytes`\n   = note: this error originates in the derive macro `FromBytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"the trait bound `u16: Unaligned` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"tests/ui/late_compile_pass.rs","byte_start":694,"byte_end":703,"line_start":39,"line_end":39,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":"the trait `Unaligned` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/late_compile_pass.rs","byte_start":694,"byte_end":703,"line_start":39,"line_end":39,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Unaligned)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1976,"byte_end":2055,"line_start":61,"line_end":61,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub fn derive_unaligned(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Unaligned`:\n  i8\n  u8","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `<Unaligned1 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`","code":null,"level":"note","spans":[{"file_name":"tests/ui/late_compile_pass.rs","byte_start":694,"byte_end":703,"line_start":39,"line_end":39,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":"required by this bound in `<Unaligned1 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/late_compile_pass.rs","byte_start":694,"byte_end":703,"line_start":39,"line_end":39,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Unaligned)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1976,"byte_end":2055,"line_start":61,"line_end":61,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub fn derive_unaligned(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error[E0277]: the trait bound `u16: Unaligned` is not satisfied\n  --> tests/ui/late_compile_pass.rs:39:10\n   |\n39 | #[derive(Unaligned)]\n   |          ^^^^^^^^^ the trait `Unaligned` is not implemented for `u16`\n   |\n   = help: the following other types implement trait `Unaligned`:\n             i8\n             u8\nnote: required by a bound in `<Unaligned1 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`\n  --> tests/ui/late_compile_pass.rs:39:10\n   |\n39 | #[derive(Unaligned)]\n   |          ^^^^^^^^^ required by this bound in `<Unaligned1 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`\n   = note: this error originates in the derive macro `Unaligned` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"the trait bound `u16: Unaligned` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"tests/ui/late_compile_pass.rs","byte_start":916,"byte_end":925,"line_start":47,"line_end":47,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":"the trait `Unaligned` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/late_compile_pass.rs","byte_start":916,"byte_end":925,"line_start":47,"line_end":47,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Unaligned)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1976,"byte_end":2055,"line_start":61,"line_end":61,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub fn derive_unaligned(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Unaligned`:\n  i8\n  u8","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `<Unaligned2 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`","code":null,"level":"note","spans":[{"file_name":"tests/ui/late_compile_pass.rs","byte_start":916,"byte_end":925,"line_start":47,"line_end":47,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":"required by this bound in `<Unaligned2 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/late_compile_pass.rs","byte_start":916,"byte_end":925,"line_start":47,"line_end":47,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Unaligned)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1976,"byte_end":2055,"line_start":61,"line_end":61,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub fn derive_unaligned(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error[E0277]: the trait bound `u16: Unaligned` is not satisfied\n  --> tests/ui/late_compile_pass.rs:47:10\n   |\n47 | #[derive(Unaligned)]\n   |          ^^^^^^^^^ the trait `Unaligned` is not implemented for `u16`\n   |\n   = help: the following other types implement trait `Unaligned`:\n             i8\n             u8\nnote: required by a bound in `<Unaligned2 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`\n  --> tests/ui/late_compile_pass.rs:47:10\n   |\n47 | #[derive(Unaligned)]\n   |          ^^^^^^^^^ required by this bound in `<Unaligned2 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`\n   = note: this error originates in the derive macro `Unaligned` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"the trait bound `u16: Unaligned` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"tests/ui/late_compile_pass.rs","byte_start":1008,"byte_end":1017,"line_start":54,"line_end":54,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":"the trait `Unaligned` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/late_compile_pass.rs","byte_start":1008,"byte_end":1017,"line_start":54,"line_end":54,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Unaligned)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1976,"byte_end":2055,"line_start":61,"line_end":61,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub fn derive_unaligned(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Unaligned`:\n  i8\n  u8","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `<Unaligned3 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`","code":null,"level":"note","spans":[{"file_name":"tests/ui/late_compile_pass.rs","byte_start":1008,"byte_end":1017,"line_start":54,"line_end":54,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":"required by this bound in `<Unaligned3 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/late_compile_pass.rs","byte_start":1008,"byte_end":1017,"line_start":54,"line_end":54,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(Unaligned)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Unaligned)]","def_site_span":{"file_name":"/usr/local/google/home/joshlf/workspace/zerocopy/zerocopy-derive/src/lib.rs","byte_start":1976,"byte_end":2055,"line_start":61,"line_end":61,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub fn derive_unaligned(ts: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error[E0277]: the trait bound `u16: Unaligned` is not satisfied\n  --> tests/ui/late_compile_pass.rs:54:10\n   |\n54 | #[derive(Unaligned)]\n   |          ^^^^^^^^^ the trait `Unaligned` is not implemented for `u16`\n   |\n   = help: the following other types implement trait `Unaligned`:\n             i8\n             u8\nnote: required by a bound in `<Unaligned3 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`\n  --> tests/ui/late_compile_pass.rs:54:10\n   |\n54 | #[derive(Unaligned)]\n   |          ^^^^^^^^^ required by this bound in `<Unaligned3 as Unaligned>::only_derive_is_allowed_to_implement_this_trait::ImplementsUnaligned`\n   = note: this error originates in the derive macro `Unaligned` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"aborting due to 5 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 5 previous errors\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"For more information about this error, try `rustc --explain E0277`.\n"}
